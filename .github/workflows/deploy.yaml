# Automate deployment of containers

name: Deploy Workflow
on: 
    workflow_dispatch
# on: 
#     push:
#         branches:
#             - 'main'

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: qr-code-generator
  EKS_CLUSTER_NAME: qr-code-generator-cluster

jobs:
    build:
        name: build
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                include:
                    - image: ella-adeka/frontend
                      dockerfile: qr-code-generator/front-end-nextjs/Dockerfile
                    - image: ella-adeka/api
                      dockerfile: qr-code-generator/api/Dockerfile
        permissions:
            id-token: write
            contents: read
            actions: read
            packages: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Automate deployment of containers
              run: echo "Automating deployment of containers"

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{env.AWS_REGION}}
            
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v4
              with:
                images: ${{ matrix.image }}
        
            - name: Build, tag, and push image to Amazon ECR
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
                # IMAGE_TAG: ${{ steps.commit.outputs.short }}
              run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
            - name: Update kube config
              run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    deploy:
        name: Deploy
        needs: [ build ]
        runs-on: ubuntu-latest
        permissions:
            id-token: write
            contents: read
            actions: read
            packages: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Deploy to EKS
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
                # IMAGE_TAG: ${{ steps.commit.outputs.short }}
              run: |
                sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" manifests/hello-app-deployment.yaml && \
                kubectl apply -f manifests/hello-app-deployment.yaml
                kubectl apply -f manifests/hello-app-service.yaml
        

            # - name: Deploy to Kubernetes
            #   uses: azure/k8s-deploy@v1
            #   with:
            #     namespace: default
            #     manifests: |
            #         kubernetes/frontend/frontend-deployment.yaml
            #         kubernetes/frontend/frontend-service.yaml
            #         kubernetes/api/api-deployment.yaml
            #         kubernetes/api/api-service.yaml
                    
            #   run: |
            #     kubectl apply -f kubernetes/nextjs/nextjs-deployment.yaml
            #     kubectl apply -f kubernetes/nextjs/nextjs-service.yaml
              
            #     kubectl apply -f kubernetes/fastapi/fastapi-deployment.yaml
            #     kubectl apply -f kubernetes/fastapi/fastapi-service.yaml
              